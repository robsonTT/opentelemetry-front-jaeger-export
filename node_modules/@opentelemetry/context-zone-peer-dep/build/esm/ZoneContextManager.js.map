{"version":3,"file":"ZoneContextManager.js","sourceRoot":"","sources":["../../src/ZoneContextManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { TargetWithEvents } from './types';\nimport { isListenerObject } from './util';\n\n/* Key name to be used to save a context reference in Zone */\nconst ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';\n\n/**\n * ZoneContextManager\n * This module provides an easy functionality for tracing action between asynchronous operations in web.\n * It was not possible with standard [StackContextManager]{@link https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts}.\n * It heavily depends on [zone.js]{@link https://www.npmjs.com/package/zone.js}.\n * It stores the information about context in zone. Each Context will have always new Zone;\n * It also supports binding a certain Span to a target that has \"addEventListener\" and \"removeEventListener\".\n * When this happens a new zone is being created and the provided Span is being assigned to this zone.\n */\nexport class ZoneContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Helps to create a unique name for the zones - part of zone name\n   */\n  private _zoneCounter = 0;\n\n  /**\n   * Returns the active context from certain zone name\n   * @param activeZone\n   */\n  private _activeContextFromZone(activeZone: Zone | undefined): Context {\n    return (activeZone && activeZone.get(ZONE_CONTEXT_KEY)) || ROOT_CONTEXT;\n  }\n\n  /**\n   * @param context A context (span) to be executed within target function\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return (contextWrapper as unknown) as T;\n  }\n\n  /**\n   * @param context A context (span) to be bind to target\n   * @param obj target object on which the listeners will be patched\n   */\n  private _bindListener<T>(context: Context, obj: T): T {\n    const target = (obj as unknown) as TargetWithEvents;\n    if (target.__ot_listeners !== undefined) {\n      return obj;\n    }\n    target.__ot_listeners = {};\n\n    if (typeof target.addEventListener === 'function') {\n      target.addEventListener = this._patchAddEventListener(\n        target,\n        target.addEventListener,\n        context\n      );\n    }\n\n    if (typeof target.removeEventListener === 'function') {\n      target.removeEventListener = this._patchRemoveEventListener(\n        target,\n        target.removeEventListener\n      );\n    }\n\n    return obj;\n  }\n\n  /**\n   * Creates a new unique zone name\n   */\n  private _createZoneName() {\n    this._zoneCounter++;\n    const random = Math.random();\n    return `${this._zoneCounter}-${random}`;\n  }\n\n  /**\n   * Creates a new zone\n   * @param zoneName zone name\n   * @param context A context (span) to be bind with Zone\n   */\n  private _createZone(zoneName: string, context: unknown): Zone {\n    return Zone.current.fork({\n      name: zoneName,\n      properties: {\n        [ZONE_CONTEXT_KEY]: context,\n      },\n    });\n  }\n\n  /**\n   * Returns the active zone\n   */\n  private _getActiveZone(): Zone | undefined {\n    return Zone.current;\n  }\n\n  /**\n   * Patches addEventListener method\n   * @param target any target that has \"addEventListener\" method\n   * @param original reference to the patched method\n   * @param [context] context to be bind to the listener\n   */\n  private _patchAddEventListener(\n    target: TargetWithEvents,\n    original: NonNullable<TargetWithEvents['addEventListener']>,\n    context: Context\n  ) {\n    const contextManager = this;\n\n    return function (\n      this: TargetWithEvents,\n      event,\n      listener,\n      opts\n    ) {\n      if (target.__ot_listeners === undefined) {\n        target.__ot_listeners = {};\n      }\n      let listeners = target.__ot_listeners[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        target.__ot_listeners[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n      return original.call(this, event, patchedListener, opts);\n    } as TargetWithEvents['addEventListener'];\n  }\n\n  /**\n   * Patches removeEventListener method\n   * @param target any target that has \"removeEventListener\" method\n   * @param original reference to the patched method\n   */\n  private _patchRemoveEventListener(\n    target: TargetWithEvents,\n    original: NonNullable<TargetWithEvents['removeEventListener']>\n  ) {\n    return function (this: TargetWithEvents, event, listener) {\n      if (\n        target.__ot_listeners === undefined ||\n        target.__ot_listeners[event] === undefined\n      ) {\n        return original.call(this, event, listener);\n      }\n      const events = target.__ot_listeners[event];\n      const patchedListener = events.get(listener);\n      events.delete(listener);\n      return original.call(this, event, patchedListener || listener);\n    } as TargetWithEvents['removeEventListener'];\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    if (!this._enabled) {\n      return ROOT_CONTEXT;\n    }\n    const activeZone = this._getActiveZone();\n\n    const active = this._activeContextFromZone(activeZone);\n    if (active) {\n      return active;\n    }\n\n    return ROOT_CONTEXT;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T | TargetWithEvents): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    } else if (isListenerObject(target)) {\n      this._bindListener(context, target);\n    }\n    return (target as unknown) as T;\n  }\n\n  /**\n   * Disable the context manager (clears all the contexts)\n   */\n  disable(): this {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context].\n   *     If [context] is undefined then it will use the active context.\n   *     The context will be set as active\n   * @param context A context (span) to be called with provided callback\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const zoneName = this._createZoneName();\n\n    const newZone = this._createZone(zoneName, context);\n\n    return newZone.run(fn, thisArg, args);\n  }\n}\n"]}